apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  labels:
    dashboards: grafana
spec:
  persistentVolumeClaim:
    spec:
      storageClassName: ceph-block
      resources:
        requests:
          storage: 512Mi
      accessModes:
        - ReadWriteOnce
  config:
    server:
      domain: grafana.${SECRET_DOMAIN}
      root_url: https://grafana.${SECRET_DOMAIN}
    analytics:
      check_for_updates: 'false'
      check_for_plugin_updates: 'false'
      reporting_enabled: 'false'
    auth:
      disable_login_form: 'true'
    auth.anonymous:
      enabled: 'false'
    auth.generic_oauth:
      enabled: 'true'
      name: Keycloak-OAuth
      allow_sign_up: 'true'
      client_id: placeholder # ovveriden by envvar
      client_secret: placeholder # ovveriden by envvar
      auth_url: placeholder # ovveriden by envvar
      token_url: placeholder # ovveriden by envvar
      api_url: placeholder # ovveriden by envvar
      signout_redirect_url: placeholder # ovveriden by envvar
      scopes: 'openid email profile offline_access roles'
      login_attribute_path: username
      name_attribute_path: preferred_username
      email_attribute_path: email
      groups_attribute_path: groups
      use_refresh_token: 'true'
      role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
      use_pkce: 'true'

    news:
      news_feed_enabled: 'false'
    metrics:
      enabled: 'true'
      disable_total_stats: 'false'
  deployment:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
      annotations:
        reloader.stakater.com/auto: 'true'
    # Inject dashboards from cofnigmaps https://grafana.github.io/grafana-operator/docs/examples/configmaps_sidecar/readme/
    spec:
      template:
        spec:
          # The volumes for dashboards and provisioning config
          volumes:
            - name: dashboards
              emptyDir: {}
            - name: provisioning-config
              configMap:
                name: provisioning-config
          containers:
            - name: grafana
              envFrom:
                - secretRef:
                    name: grafana-instance-secret
              volumeMounts:
                - mountPath: /etc/grafana/provisioning/dashboards
                  name: provisioning-config
                - mountPath: /var/lib/grafana/dashboards
                  name: dashboards
            # This container watches the namespace for configmaps with the `dashboards` label
            # and creates files for all their keys under `FOLDER`
            - image: 'ghcr.io/kiwigrid/k8s-sidecar:1.30.7'
              name: k8s-sidecar
              env:
                - name: LABEL
                  value: 'grafana_dashboard'
                - name: LABEL_VALUE
                  value: '1'
                - name: FOLDER
                  value: /var/lib/grafana/dashboards
                - name: NAMESPACE
                  value: ALL
                - name: RESOURCE
                  value: configmap
              volumeMounts:
                - mountPath: /var/lib/grafana/dashboards
                  name: dashboards
---
# Provisioning config
apiVersion: v1
kind: ConfigMap
metadata:
  name: provisioning-config
  namespace: observability
data:
  provisioning.yaml: |-
    apiVersion: 1
    providers:
      - name: 'configmap-dashboard-provider'
        orgId: 1
        folder: ''
        folderUid: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: false
        options:
          path: /var/lib/grafana/dashboards
          foldersFromFilesStructure: true
---
# bind the new permissions to the grafana-sa
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: sidecar-rolebinding
roleRef:
  kind: ClusterRole
  name: sidecar-role
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: grafana-sa
    namespace: observability
---
# need to extend the permissions of the Grafana serviceaccount to watch for configmaps
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sidecar-role
rules:
  - apiGroups: ['']
    resources: ['configmaps']
    verbs: ['get', 'watch', 'list']
